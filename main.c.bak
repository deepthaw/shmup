#include <SDL2/SDL.h>
#include <SDL_events.h>
#include <SDL_image.h>
#include <SDL_render.h>
#include <SDL_timer.h>
#include <SDL_video.h>
#include <stdbool.h>
#include <stdio.h>
#include "main.h"
#include "sprites.h"

SDL_Window *gWindow = NULL;
SDL_Renderer *gRenderer = NULL;

SDL_Texture *bgScreens[2];
SDL_Texture *bgTexture = NULL;
SDL_Texture *spriteTexture[NUM_SPRITE_TEX];
SDL_Texture *bgTiles[NUM_BG_TILES];
SDL_Texture *backBufferSurface = NULL;

char bgTileMap[80][45];

SDL_Rect view;

bool init();
bool loadMedia();
void close();
void processInput();
void update();
void render();

Sprite player;

SDL_Texture *buildBackGround();
SDL_Texture *scrollExceed(SDL_Texture *append);

bool init() {
  printf("Beginning init.\n");
  bool success = true;

  if (SDL_Init(SDL_INIT_VIDEO) < 0) {
    printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
    success = false;
  } else {
    printf("creating window.\n");
    gWindow = SDL_CreateWindow("test", SDL_WINDOWPOS_UNDEFINED,
                               SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH,
                               SCREEN_HEIGHT, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL);
    printf("Window attempted.");
    if (gWindow == NULL) {
      printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
      success = false;
    } else {
      printf("creating renderer\n");
      gRenderer = SDL_CreateRenderer(gWindow, -1, SDL_RENDERER_ACCELERATED);
      if (gRenderer == NULL) {
        printf("Renderer could not be created! SDL Error: %s\n",
               SDL_GetError());
        success = false;
      } else {
        SDL_RenderSetScale(gRenderer, SCALE, SCALE);
        SDL_SetRenderDrawColor(gRenderer, 0xFF, 0xFF, 0xFF, 0xFF);
        int imgFlags = IMG_INIT_PNG;
        if (!(IMG_Init(imgFlags) & imgFlags)) {
          printf("SDL_image could not initialize! SDL_image Error: %s\n",
                 SDL_GetError());
          success = false;
        } else {

          bgScreens[0] = SDL_CreateTexture(gRenderer, SDL_PIXELFORMAT_RGB24,
                                           SDL_TEXTUREACCESS_TARGET,
                                           SCREEN_WIDTH, SCREEN_HEIGHT);

          bgScreens[1] = SDL_CreateTexture(gRenderer, SDL_PIXELFORMAT_RGB24,
                                           SDL_TEXTUREACCESS_TARGET,
                                           SCREEN_WIDTH, SCREEN_HEIGHT);

          bgTexture = SDL_CreateTexture(gRenderer, SDL_PIXELFORMAT_RGB24,
                                        SDL_TEXTUREACCESS_TARGET,
                                        SCREEN_WIDTH * 2, SCREEN_HEIGHT * 2);
        }
      }
    }

    printf("init success\n");
  }

  return success;
}

bool loadMedia() {

  bool success = true;

  for (int i = 0; i != NUM_SPRITE_TEX; i++) {

    char buff[256] = "";
    char prefix[] = "images/sprite";
    char num[4];
    char suffix[] = ".png";

    sprintf(num, "%03d", i);

    strcat(buff, prefix);
    strcat(buff, num);
    strcat(buff, suffix);

    spriteTexture[i] = IMG_LoadTexture(gRenderer, buff);
    if (spriteTexture[i] == NULL) {
      printf("Failed to load background tile!\n");
      success = false;
    }
  }
  for (int i = 0; i != NUM_BG_TILES; i++) {

    char buff[256] = "";
    char prefix[] = "images/tile";
    char num[4];
    char suffix[] = ".png";

    sprintf(num, "%03d", i);

    strcat(buff, prefix);
    strcat(buff, num);
    strcat(buff, suffix);

    bgTiles[i] = IMG_LoadTexture(gRenderer, buff);
    if (bgTiles[i] == NULL) {
      printf("Failed to load background tile!\n");
      success = false;
    }
  }

  bgTexture = buildBackGround();

  printf("loadMedia success\n");
  return success;
}

void close() {

  SDL_DestroyWindow(gWindow);
  gWindow = NULL;

  SDL_Quit();
}

void processInput() {
  const Uint8 *keys = SDL_GetKeyboardState(NULL);

  if (keys[SDL_SCANCODE_UP]) {
    player.y--;
  }
  if (keys[SDL_SCANCODE_DOWN]) {
    player.y++;
  }
  if (keys[SDL_SCANCODE_LEFT]) {
    player.x--;
  }
  if (keys[SDL_SCANCODE_RIGHT]) {
    player.x++;
  }
}

void update() {
  view.x += SCROLL_SPEED;
  view.y = 0;
  view.w = SCREEN_WIDTH;
  view.h = SCREEN_HEIGHT;
  player.rect.x = player.x;
  player.rect.y = player.y;

  if (view.x > SCREEN_WIDTH) {
    bgTexture = scrollExceed(NULL);
    view.x = view.x - SCREEN_WIDTH;
  }
  return;
}

SDL_Texture *buildBackGround() {

  struct SDL_Rect r;
  r.h = TILE_Y;
  r.w = TILE_X;

  SDL_SetRenderTarget(gRenderer, bgScreens[0]);
  for (int i = 0; i != BG_LAYERS; i++) {
    for (int y = 0; y <= SCREEN_HEIGHT; y += TILE_Y) {
      for (int x = 0; x <= SCREEN_WIDTH; x += TILE_X) {
        r.x = x;
        r.y = y;
        SDL_RenderCopy(gRenderer, bgTiles[0], NULL, &r);
      }
    }
  }

  SDL_SetRenderTarget(gRenderer, bgScreens[1]);
  for (int i = 0; i != BG_LAYERS; i++) {
    for (int y = 0; y <= SCREEN_HEIGHT; y += TILE_Y) {
      for (int x = 0; x <= SCREEN_WIDTH; x += TILE_X) {
        r.x = x;
        r.y = y;
        SDL_RenderCopy(gRenderer, bgTiles[1], NULL, &r);
      }
    }
  }

  r.x = 0;
  r.y = 0;
  r.h = SCREEN_HEIGHT;
  r.w = SCREEN_WIDTH;
  SDL_SetRenderTarget(gRenderer, bgTexture);
  SDL_RenderCopy(gRenderer, bgScreens[0], NULL, &r);
  r.x = SCREEN_WIDTH;
  SDL_RenderCopy(gRenderer, bgScreens[1], NULL, &r);
  SDL_SetRenderTarget(gRenderer, NULL);
  return bgTexture;
}

SDL_Texture *scrollExceed(SDL_Texture *append) {

  struct SDL_Rect r;
  r.h = TILE_Y;
  r.w = TILE_X;

  SDL_Texture *p = bgScreens[0];
  bgScreens[0] = bgScreens[1];
  bgScreens[1] = p;

  SDL_SetRenderTarget(gRenderer, bgScreens[1]);
  for (int i = 0; i != BG_LAYERS; i++) {
    for (int y = 0; y <= SCREEN_HEIGHT; y += TILE_Y) {
      for (int x = 0; x <= SCREEN_WIDTH; x += TILE_X) {
        r.x = x;
        r.y = y;
        SDL_RenderCopy(gRenderer, bgTiles[2], NULL, &r);
      }
    }
  }
  r.x = 0;
  r.y = 0;
  r.h = SCREEN_HEIGHT;
  r.w = SCREEN_WIDTH;
  SDL_SetRenderTarget(gRenderer, bgTexture);
  SDL_RenderCopy(gRenderer, bgScreens[0], NULL, &r);
  r.x = SCREEN_WIDTH;
  SDL_RenderCopy(gRenderer, bgScreens[1], NULL, &r);
  SDL_SetRenderTarget(gRenderer, NULL);
  return bgTexture;
}

void render() {

  SDL_RenderClear(gRenderer);
  //  if (bgTexture == NULL) {
  //  bgTexture = buildBackGround();
  //  }
  SDL_RenderCopy(gRenderer, bgTexture, &view, NULL);
  SDL_RenderCopy(gRenderer, player.currentFrame, NULL, &player.rect);
  SDL_RenderPresent(gRenderer);
}

int main(int argc, char *args[]) {

  SDL_Event e;
  bool quit = false;
  uint64_t nextTic;
  if (!init()) {
    printf("Failed to initialize!\n");
  } else {
    if (!loadMedia()) {
      printf("Failed to load media!\n");
    } else {

      player.currentFrame = spriteTexture[0];
      player.x = SCREEN_WIDTH / 2;
      player.y = SCREEN_HEIGHT / 2;
      player.rect.w = 30;
      player.rect.h = 11;

      while (!quit) {
        while (SDL_PollEvent(&e) != 0) {
          if (e.type == SDL_QUIT) {
            quit = true;
          }
        }
        nextTic = SDL_GetTicks64() + SCREEN_TICKS_PER_FRAME;
        processInput();
        update();
        render();
        while (SDL_GetTicks64() <= nextTic)
          ;
      }
    }
  }
  close();

  return 0;
}
